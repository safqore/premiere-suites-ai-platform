name: Deploy Vercel Frontend

on:
  workflow_dispatch:
    inputs:
      deploy_path:
        description: 'Relative path to the application root to deploy'
        required: false
        default: 'src/demo'
      environment:
        description: 'Deployment environment (production | preview)'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - preview

concurrency:
  group: vercel-deploy-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      deployment_url: ${{ steps.deploy.outputs.deployment_url }}
    env:
      # Required secrets (validated below)
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_PROJECT_NAME: ${{ secrets.VERCEL_PROJECT_NAME }}
      # Pin the Vercel CLI version instead of using 'latest'. Update intentionally as needed.
      VERCEL_CLI_VERSION: 35.2.3
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Preflight (secrets, path, environment)
        id: preflight
        shell: bash
        run: |
          set -euo pipefail
          : "${VERCEL_TOKEN:?Missing VERCEL_TOKEN secret}" # Fails if empty
          : "${VERCEL_PROJECT_NAME:?Missing VERCEL_PROJECT_NAME secret}" # Fails if empty

          DEPLOY_PATH="${{ github.event.inputs.deploy_path || 'src/demo' }}"
          DEPLOY_PATH="${DEPLOY_PATH%/}" # strip trailing slash
          if [[ ! -d "$DEPLOY_PATH" ]]; then
            echo "❌ Deploy path does not exist: $DEPLOY_PATH" >&2
            exit 1
          fi

          REQUESTED_ENV="${{ github.event.inputs.environment || 'production' }}"
            case "$REQUESTED_ENV" in
              production|preview) ;;
              *) echo "Invalid environment: $REQUESTED_ENV" >&2; exit 1;;
            esac

          if [[ "$REQUESTED_ENV" == "production" ]]; then
            PROD_FLAG="--prod"
          else
            PROD_FLAG="" # preview deployment
          fi

          echo "DEPLOY_PATH=$DEPLOY_PATH" >> "$GITHUB_ENV"
          echo "ENVIRONMENT=$REQUESTED_ENV" >> "$GITHUB_ENV"
          echo "PROD_FLAG=$PROD_FLAG" >> "$GITHUB_ENV"
          echo "path=$DEPLOY_PATH" >> "$GITHUB_OUTPUT"
          echo "environment=$REQUESTED_ENV" >> "$GITHUB_OUTPUT"

          echo "✅ Preflight complete: path=$DEPLOY_PATH environment=$REQUESTED_ENV"

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # No caching configured because the deploy path currently has no package.json/package-lock.json.
          # Add caching fields back if you introduce a build step with dependencies.

      - name: Deploy to Vercel
        id: deploy
        shell: bash
        working-directory: ${{ env.DEPLOY_PATH }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_NAME: ${{ secrets.VERCEL_PROJECT_NAME }}
          VERCEL_CLI_VERSION: ${{ env.VERCEL_CLI_VERSION }}
          PROD_FLAG: ${{ env.PROD_FLAG }}
        run: |
          set -euo pipefail
          echo "Deploying project '$VERCEL_PROJECT_NAME' (env=$ENVIRONMENT) from $PWD using vercel@$VERCEL_CLI_VERSION ..."
          # Use npx with a pinned version to avoid global install pollution.
          DEPLOY_JSON=$(npx --yes vercel@"$VERCEL_CLI_VERSION" \
            --token "$VERCEL_TOKEN" \
            ${PROD_FLAG:-} \
            --yes \
            --name "$VERCEL_PROJECT_NAME" \
            --output json)

          # Extract URL (jq is available on ubuntu-latest)
          URL=$(echo "$DEPLOY_JSON" | jq -r '.url // .deployment.url // empty')
          if [[ -z "$URL" || "$URL" == "null" ]]; then
            echo "❌ Could not parse deployment URL" >&2
            echo "$DEPLOY_JSON" >&2
            exit 1
          fi
          FULL_URL="https://$URL"
          echo "deployment_url=$FULL_URL" >> "$GITHUB_OUTPUT"
          echo "DEPLOYMENT_URL=$FULL_URL" >> "$GITHUB_ENV"
          echo "✅ Deployed: $FULL_URL"

          # Clean any local .vercel metadata to avoid polluting repo (defensive)
          rm -rf .vercel || true

      - name: Deployment summary
        if: success()
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "### Vercel Deployment"
            echo "- Project: $VERCEL_PROJECT_NAME"
            echo "- Environment: $ENVIRONMENT"
            echo "- Path: $DEPLOY_PATH"
            echo "- URL: $DEPLOYMENT_URL"
            echo "- Commit: $GITHUB_SHA"
          } >> "$GITHUB_STEP_SUMMARY"
