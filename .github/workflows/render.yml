name: Deploy N8N Backend via Render CLI

on:
  workflow_dispatch:
    inputs:
      workflow_n8n_path:
        description: 'N8N workflow to deploy'
        required: false
        default: 'docs/workflows/premiere-suites-demo-workflow.json'

concurrency:
  group: render-deploy-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      RENDER_SERVICE_ID: ${{ vars.RENDER_SERVICE_ID }}
      RENDER_CLI_VERSION: 2.1.5
      DOCKERFILE_PATH: deploy/n8n/Dockerfile
      DOCKER_BUILD_CONTEXT: .
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Preflight (secrets, path)
        id: preflight
        shell: bash
        run: |
          set -euo pipefail
          : "${RENDER_API_KEY:?Missing RENDER_API_KEY secret}"
          : "${RENDER_SERVICE_ID:?Missing RENDER_SERVICE_ID variable}"

          WORKFLOW_PATH="${{ github.event.inputs.workflow_n8n_path || 'docs/workflows/premiere-suites-demo-workflow.json' }}"
          WORKFLOW_PATH="${WORKFLOW_PATH%/}"

          if [[ ! -f "$WORKFLOW_PATH" ]]; then
            echo "❌ Workflow file does not exist: $WORKFLOW_PATH" >&2
            exit 1
          fi

          echo "WORKFLOW_PATH=$WORKFLOW_PATH" >> "$GITHUB_ENV"
          echo "workflow_path=$WORKFLOW_PATH" >> "$GITHUB_OUTPUT"
          echo "✅ Preflight complete: workflow_path=$WORKFLOW_PATH"

      - name: Install Render CLI (pinned)
        run: |
          set -euo pipefail
          echo "Downloading Render CLI v${RENDER_CLI_VERSION}"
          curl -L "https://github.com/render-oss/cli/releases/download/v${RENDER_CLI_VERSION}/cli_${RENDER_CLI_VERSION}_linux_amd64.zip" -o render.zip
          unzip -o -q render.zip
          chmod +x "cli_v${RENDER_CLI_VERSION}"
          sudo mv "cli_v${RENDER_CLI_VERSION}" /usr/local/bin/render
          render --version

      - name: Render login (non-interactive)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          CI: 'true'
        run: render login --confirm -o json

      - name: Set Render workspace
        env:
          RENDER_WORKSPACE_ID: ${{ vars.RENDER_WORKSPACE_ID }}
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          CI: 'true'
        run: |
          set -euo pipefail
          if [[ -z "${RENDER_WORKSPACE_ID:-}" ]]; then
            echo "❌ RENDER_WORKSPACE_ID not set (add as a repo variable or secret)" >&2
            exit 1
          fi
          echo "Setting Render workspace to $RENDER_WORKSPACE_ID"
          render workspace set "$RENDER_WORKSPACE_ID" --confirm -o json

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Local Docker build validation
        run: |
          set -euo pipefail
          echo "Validating Docker build using $DOCKERFILE_PATH (context: $DOCKER_BUILD_CONTEXT) ..."
          if [[ ! -f "$DOCKERFILE_PATH" ]]; then
            echo "❌ Dockerfile not found at $DOCKERFILE_PATH" >&2
            exit 1
          fi
          docker build --pull -f "$DOCKERFILE_PATH" -t n8n-workflow-test:validation "$DOCKER_BUILD_CONTEXT"
          echo "✅ Local Docker build succeeded."

      - name: Trigger redeploy
        run: |
          set -euo pipefail
          echo "Triggering Render deploy for $RENDER_SERVICE_ID ..."
          DEPLOY_JSON=$(render services deploy "$RENDER_SERVICE_ID" --confirm -o json)
          # Pretty print for logs (non-fatal if formatting fails)
          echo "$DEPLOY_JSON" | jq . || echo "Raw deploy JSON (non-object/array pretty print failed): $DEPLOY_JSON"

          # Extract deploy id supporting multiple possible shapes:
          # 1) { "deploy": { "id": "..." }, ... }
          # 2) { "deployId": "..." }
          # 3) { "id": "...", "type":"deploy"... }
          # 4) [ { "deploy": { "id": "..." } } ]
          # 5) [ { "deployId": "..." } ]
          DEPLOY_ID=$(echo "$DEPLOY_JSON" | jq -r '
            if type=="array" then
              (.[0].deploy.id? // .[0].deployId? // .[0].id? )
            else
              (.deploy.id? // .deployId? // .id?)
            end
          ')

          if [[ -z "${DEPLOY_ID:-}" || "$DEPLOY_ID" == "null" ]]; then
            echo "❌ Could not obtain deploy id from JSON"
            echo "$DEPLOY_JSON"
            exit 1
          fi

            echo "Deploy ID: $DEPLOY_ID"
          echo "Polling deploy status..."
          for i in $(seq 1 180); do
            STATUS_JSON=$(render deploys get "$DEPLOY_ID" --confirm -o json || true)
            echo "$STATUS_JSON" | jq -r '.deploy.status?,.deploy.phase?' >/dev/null 2>&1 || true
            STATUS=$(echo "$STATUS_JSON" | jq -r '
              if type=="array" then (.[0].deploy.status? // .[0].status? // empty)
              else (.deploy.status? // .status? // empty)
              end')
            PHASE=$(echo "$STATUS_JSON" | jq -r '
              if type=="array" then (.[0].deploy.phase? // .[0].phase? // empty)
              else (.deploy.phase? // .phase? // empty)
              end')
            echo "[$(date -u +%H:%M:%S)] status=$STATUS phase=$PHASE"
            case "$STATUS" in
              live)
                echo "✅ Deploy succeeded."
                break
                ;;
              failed|canceled)
                echo "❌ Deploy failed."
                echo "$STATUS_JSON"
                exit 1
                ;;
            esac
            sleep 5
            if [[ $i -eq 180 ]]; then
              echo "❌ Timeout waiting for deploy to finish."
              exit 1
            fi
          done
