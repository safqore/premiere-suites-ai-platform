{
  "name": "premiere_suites_debug_workflow",
  "nodes": [
    {
      "parameters": {
        "public": true,
        "initialMessages": "Hi there! ðŸ‘‹\nMy name is Nexa. How can I assist you today?",
        "options": {}
      },
      "id": "chat-trigger",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [0, 0],
      "webhookId": "a889d2ae-2159-402f-b326-5f61e90f602e"
    },
    {
      "parameters": {
        "jsCode": "// Debug node to see what's being received\nconst input = $input.first().json;\nconsole.log('=== DEBUG: Input Received ===');\nconsole.log(JSON.stringify(input, null, 2));\n\n// Extract the actual message text\nconst messageText = input.text || input.message || input.chat_message || input.prompt || input.input || input.chatInput || '';\nconsole.log('=== DEBUG: Extracted Message ===');\nconsole.log('Message:', messageText);\nconsole.log('Message length:', messageText.length);\n\n// Return the input with debug info AND ensure chatInput is preserved\nreturn {\n  json: {\n    ...input,\n    chatInput: messageText, // Ensure chatInput field is present\n    text: messageText, // Also set text field\n    message: messageText, // Also set message field\n    debug_extracted_message: messageText,\n    debug_message_length: messageText.length,\n    debug_timestamp: new Date().toISOString()\n  }\n};"
      },
      "id": "debug-input",
      "name": "Debug Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [200, 0]
    },
    {
      "parameters": {
        "model": "gpt-5-nano",
        "options": {}
      },
      "id": "openai-model",
      "name": "OpenAI Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [144, 208],
      "credentials": {
        "openAiApi": {
          "id": "CBfciRQoF1KUjSKg",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "# Role\nYou are the **Premier Suites Booking Concierge**.\n\n# Instructions\nYour job:\nâ€¢ Qualify a web lead by collecting â€” in a friendly tone and one concise question at a time â€” the visitor's:\n    â€“ name\n    â€“ email\n    â€“ city\n    â€“ check-in and check-out dates\n    â€“ number of guests or bedrooms\n    â€“ monthly budget\nâ€¢ If budget < $1 500 **OR** stay â‰¤ 7 nights:\n    â€“ apologise\n    â€“ give a helpful alternative\n    â€“ end the chat\nNever quote exact prices, never promise discounts.\nRespond in plain text only (no code blocks).\nâ€¢ when you are asked a question, check the vector db for the answer and match the questions, if the match is above 70% answer exactly how the answer is in the db"
        }
      },
      "id": "agent",
      "name": "Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [400, 0]
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [320, 192],
      "id": "memory",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [1008, 464],
      "id": "embeddings",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "CBfciRQoF1KUjSKg",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "description": "{{ $json.chatInput || $json.text || $json.message || $json.chat_message || $json.prompt || $json.input || $json.debug_extracted_message || '' }}",
        "topK": 5,
        "scoreThreshold": 0.3
      },
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1.1,
      "position": [736, 128],
      "id": "vector-store-tool",
      "name": "Answer questions with a vector store"
    },
    {
      "parameters": {
        "qdrantCollection": {
          "__rl": true,
          "value": "premiere_suites_faqs",
          "mode": "list",
          "cachedResultName": "premiere_suites_faqs"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1.3,
      "position": [368, 400],
      "id": "qdrant-store",
      "name": "Qdrant Vector Store",
      "credentials": {
        "qdrantApi": {
          "id": "QXNX5AQMJu9isjNk",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Debug node to see what the vector store tool returns\nconst input = $input.first().json;\nconsole.log('=== DEBUG: Vector Store Tool Output ===');\nconsole.log(JSON.stringify(input, null, 2));\n\n// Check if we have results\nconst hasResults = input && Array.isArray(input) && input.length > 0;\nconsole.log('Has results:', hasResults);\nconsole.log('Number of results:', hasResults ? input.length : 0);\n\nif (hasResults) {\n  console.log('First result:', input[0]);\n}\n\nreturn {\n  json: {\n    debug_vector_results: hasResults,\n    debug_result_count: hasResults ? input.length : 0,\n    debug_first_result: hasResults ? input[0] : null,\n    original_data: input\n  }\n};"
      },
      "id": "debug-vector-results",
      "name": "Debug Vector Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 0]
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Debug Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug Input": {
      "main": [
        [
          {
            "node": "Debug Vector Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug Vector Results": {
      "main": [
        [
          {
            "node": "Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Model": {
      "ai_languageModel": [
        [
          {
            "node": "Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Answer questions with a vector store",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Answer questions with a vector store": {
      "ai_tool": [
        [
          {
            "node": "Debug Vector Results",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store": {
      "ai_vectorStore": [
        [
          {
            "node": "Answer questions with a vector store",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ],
      "ai_tool": [[]]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "debug-version",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "debug-instance"
  },
  "id": "debug-workflow",
  "tags": []
}
